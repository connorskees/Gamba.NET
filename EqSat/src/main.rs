use std::time::{Duration, Instant};

use egg::*;

use crate::{const_fold::ConstantFold, cost::EGraphCostFn, rules::make_rules};

mod const_fold;
mod cost;
mod rules;

define_language! {
    pub enum Expr {
        // arithmetic operations
        "+" = Add([Id; 2]),        // (+ a b)
        "*" = Mul([Id; 2]),        // (* a b)
        "**" = Pow([Id; 2]),       // (** a b)
        // bitwise operations
        "&" = And([Id; 2]),        // (& a b)
        "|" = Or([Id; 2]),         // (| a b)
        "^" = Xor([Id; 2]),        // (^ a b)
        "~" = Neg([Id; 1]),        // (~ a)

        // Values:
        Constant(i64),             // (int)
        Symbol(Symbol),            // (x)
    }
}

impl Expr {
    pub fn num(&self) -> Option<i64> {
        match self {
            Expr::Constant(n) => Some(*n),
            _ => None,
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub enum AstClassification {
    Unknown,
    Constant { value: i64 },
    Bitwise,
    Linear { is_variable: bool },
    Nonlinear,
    Mixed,
}

/// parse an expression, simplify it using egg, and pretty print it back out
fn simplify(s: &str, optimize_for_linearity: bool) -> String {
    let expr: RecExpr<Expr> = s.parse().unwrap();

    // Create the runner. You can enable explain_equivalence to explain the equivalence,
    // but it comes at a severe performance penalty.
    let explain_equivalence = false;
    let mut runner: Runner<Expr, ConstantFold> = Runner::default()
        .with_time_limit(Duration::from_millis(5000))
        .with_expr(&expr);

    if explain_equivalence {
        runner = runner.with_explanations_enabled();
    }

    let rules = make_rules();

    let start = Instant::now();
    runner = runner.run(&rules);

    // the Runner knows which e-class the expression given with `with_expr` is in
    let root = runner.roots[0];

    // use an Extractor to pick the best element of the root eclass
    let (best_cost, best) = if optimize_for_linearity {
        let cost_func = EGraphCostFn {
            egraph: &runner.egraph,
        };

        let extractor = Extractor::new(&runner.egraph, cost_func);
        extractor.find_best(root)
    } else {
        let extractor = Extractor::new(&runner.egraph, AstSize);
        extractor.find_best(root)
    };

    let duration = start.elapsed();
    println!("Time elapsed in simplify() is: {:?}", duration);

    println!(
        "Simplified {} \n\nto:\n{}\n with cost {}\n\n",
        expr, best, best_cost
    );

    best.to_string()
}

fn main() {
    // Get the program arguments.
    let mut args = std::env::args();

    // Skip the first argument since it's always the path to the current program.
    args.next();

    // Read the optional expression to simplify.
    let expr = if let Some(next) = args.next() {
        next
    } else {
        "(+ (+ (+ (* (+ y (^ y (~ x))) (+ (* (| y x) (* x (* (* y x) (* y -4963545269917450240)))) (* (* x 1053768439367204864) (* y (& x (~ y)))))) (* (^ y (~ x)) (* (^ y (~ x)) (* (^ y x) 6500170837692252160)))) (+ (+ (+ (+ (* (& x (~ y)) (+ (* (^ y (~ x)) (* (^ y (~ x)) -1242936803585949696)) (* 1242936803585949696 (* (& y x) (& x (~ y)))))) (+ (* (* (^ y x) (& y x)) (+ (* (^ y x) (+ (* (| y x) 156381889551138816) (* -1 (* (* y x) 4494399601264033792)))) (+ (* (* y y) (* -1 8701149918271635456)) (* (* y x) (* (* y x) 2481772634958725120))))) (+ (* -1 (+ (* (^ y (~ x)) (* (| y x) (* (^ y (~ x)) (* (| y x) 6049732328593293312)))) (* 6347279416522964992 (* (| y x) (* (* (& y x) (| y x)) (+ y (^ y (~ x)))))))) (+ (* (* (^ y x) (^ y x)) (+ (* (^ y x) 9197308388596252672) (* (* y x) 4494399601264033792))) (+ (* (| y x) (* x (* (* y x) (* y -4963545269917450240)))) (* (+ (* (& x (~ y)) 1242936803585949696) (* y 414312267861983232)) (* y (* y -1)))))))) (+ (+ (+ 7477701790215481006 (* (^ y x) (* (^ y x) 2647290229186101248))) (+ (+ (* (| y x) (* (+ (& x (~ y)) (+ (^ y (~ x)) (* (& y x) -1))) (* y 7553939277059457024))) (* (* (* y y) (* 
            x 7029109185614708736)) (* (+ (& x (~ y)) (* (& y x) -1)) (* x (^ y (~ x)))))) (+ (+ (* 8701149918271635456 (* (& x (~ y)) (* y (* (^ y x) (& x (~ y)))))) (* (+ (* 579243341355417600 (* y y)) (* (& y x) (* (^ y x) 1044444237166280704))) (* y (+ (& x (~ y)) (^ y (~ x)))))) (+ (* -1 (+ (* y (+ (* (* x 1053768439367204864) (* y (& y x))) (* x (* x (* y 7878655039613435904))))) (+ 
            (* (* (^ y (~ x)) (^ y (~ x))) (* (* y x) 8696487817171173376)) (* (^ y x) (* (| y x) 7857583156965146624))))) (* (& x (~ y)) (+ (* (^ y (~ x)) 7381264205732642816) (* (| y x) (* (| y x) 4539428588151111680)))))))) (+ (* (+ (& x (~ y)) (^ y (~ x))) (+ (* (* (& y x) (& y x)) (* (^ y x) 8701149918271635456)) (* (* (| y x) (| y x)) (* (| y x) -208509186068185088)))) (+ (* (* (& x 
            (~ y)) (& x (~ y))) (+ (* (* y y) 868865012033126400) (* (& y x) (* -1 (+ (* (& x (~ y)) 579243341355417600) (* (^ y (~ x)) 1737730024066252800)))))) (+ (* (^ y (~ x)) (* (+ (* (& x (~ y)) (& x (~ y))) (* (& y x) (& y x))) (* (^ y (~ x)) 868865012033126400))) (+ (+ (* -1 (+ (* 9078561201515921408 (* y (* y (* y y)))) (* (* (& y x) (& x (~ y))) (* (^ y x) (* (& x (~ y)) 8701149918271635456))))) (* (* (* y x) 4494399601264033792) (* (* (^ y x) (^ y x)) (+ y (+ (& x (~ y)) (^ y (~ x))))))) (+ (* (* (& y x) (& y x)) (+ (* 2900383306090545152 (* (^ y x) (* (& y x) -1))) (* (^ y (~ x)) (+ (* (& x (~ y)) 1737730024066252800) (* -1 (* (& y x) 579243341355417600)))))) (* (^ y (~ x)) (+ (* (^ y (~ x)) (* (* y y) 868865012033126400)) (* (* y (& x (~ y))) (* (& 
            x (~ y)) 1737730024066252800))))))))))) (+ (* (^ y (~ x)) (* (* y y) (* x 1053768439367204864))) (+ (* (+ y (^ y (~ x))) (+ (* (* (^ y x) (| y x)) (+ (* (| y x) -312763779102277632) (+ (* (* y x) -469145668653416448) (* (^ y x) -156381889551138816)))) (* (* y (* x x)) (+ (* (^ y x) (* y -2481772634958725120)) (* 1240886317479362560 (* -1 (* x (* y y)))))))) (+ (* (| y x) (+ (* 
            (& x (~ y)) (+ (* (& x (~ y)) (* x (* y -9074598492889939968))) (* (^ y x) (* y 6347279416522964992)))) (+ (* (^ y (~ x)) (* (* (| y x) (& x (~ y))) 6347279416522964992)) (+ (+ (* (^ y (~ x)) (* (* y -297547087929671680) (* x (& y x)))) (* x (* y -2563002698592944128))) (+ (* (* x (* y y)) (* (| y x) -469145668653416448)) (* (^ y x) (* -1 (+ (* 6049732328593293312 (* (^ y (~ x)) (^ y (~ x)))) (* (& y x) (* y 6347279416522964992)))))))))) (+ (+ (* (* (^ y x) (^ y (~ x))) (* (^ y (~ x)) (* y 8701149918271635456))) (* -1 (+ (* (| y x) (* (^ y (~ x)) (* (& y x) 7553939277059457024))) (* (* x (* y (* y y))) 8696487817171173376)))) (+ (+ (+ (* (* (& y x) (& y x)) (* (& y x) (* (* y x) (* -1 4350574959135817728)))) (* (& x (~ y)) (+ (* (& x (~ y)) (* (* y x) (* (& x (~ y)) 4350574959135817728))) (* (^ y (~ x)) (* (^ y x) (* y -1044444237166280704)))))) (+ (* (+ (* x (* (^ y (~ x)) 4350574959135817728)) (+ (* (& x (~ y)) (* x -5395019196302098432)) (* (& y x) (* x 5395019196302098432)))) (* y (* (^ y (~ x)) (^ y (~ x))))) (+ (* (* (& y x) (& x (~ y))) (* 9074598492889939968 (* (^ y x) (* y x)))) (* (* y y) (* (* x x) (* y 4859271590048694272)))))) (+ (* (* (& x (~ y)) (^ y (~ x))) (* (| y x) 7553939277059457024)) (* (& y x) (* (* y (* y y)) (* x 5395019196302098432)))))))))) (+ (* (& x (~ y)) (+ (* (* (^ y x) (& x (~ y))) (+ (* (^ y (~ x)) 8701149918271635456) (* (& x (~ y)) 2900383306090545152))) (+ (+ (* (* (^ y x) (| y x)) (+ (* (| y x) -312763779102277632) (+ (* (* y x) -469145668653416448) (* (^ y 
            x) -156381889551138816)))) (* (* y (* x x)) (+ (* (^ y x) (* y -2481772634958725120)) (* 1240886317479362560 (* -1 (* x (* y y))))))) (* (| y x) (+ (* (| y x) (* y 6347279416522964992)) (* x (* (* y x) (* y -4963545269917450240)))))))) (+ (+ (+ (* (* y (* x (* (| y x) (| y x)))) (* (& y x) 469145668653416448)) (* (* (| y x) (& x (~ y))) (+ (* (* y y) -1044444237166280704) (* (^ y (~ x)) (* -1 (* y 2088888474332561408)))))) (+ (* (& y x) (+ (* -1 (* (* (* y (* y y)) (* x x)) 7029109185614708736)) (+ (* (* (| y x) (| y x)) (+ (* (^ y x) 312763779102277632) (* (| y x) 208509186068185088))) (* (* y (| y x)) (+ (* (* x x) (* y 4963545269917450240)) (* (^ y x) (* x 469145668653416448))))))) (+ (* -1 (+ (* (^ y x) 911170646057156606) (+ (* x (* y 1366755969085734909)) (* (| y x) (+ (* (| y x) 7857583156965146624) 1822341292114313212))))) (* (* (^ y x) (& y x)) (+ (* (& y x) 6500170837692252160) (* (& x (~ y)) 5446402398325047296)))))) (+ (* (* (^ y (~ x)) (^ y (~ x))) (+ (* -5395019196302098432 (* x (* y y))) (+ (* (^ y (~ x)) (* y 579243341355417600)) (+ (* (& x (~ y)) (* y 1737730024066252800)) (* -1 (+ (* (& y x) (* y 1737730024066252800)) (* (^ y (~ x)) (* (^ y (~ x)) 9078561201515921408)))))))) (+ (+ (* (| y x) (+ (* (* y y) (+ (* (& y x) 1044444237166280704) (* y 5800766612181090304))) (* (* (^ y (~ x)) (^ y (~ x))) (+ (* y -1044444237166280704) (* (^ y (~ x)) 5800766612181090304))))) (+ (* (^ y x) (+ (* (* y (^ y x)) (* y 7710938954706452480)) (* (* (^ y x) (& x (~ y))) (+ (* (^ y (~ x)) -3024866164296646656) (* (& x (~ y)) 7710938954706452480))))) (+ (* (& y x) (* (+ (& x (~ y)) (^ y (~ x))) (* -1 (* (* y y) 1737730024066252800)))) (+ (* (* -1 (+ (* (^ y (~ x)) 579243341355417600) (* (& x (~ y)) 1737730024066252800))) (* (^ y (~ x)) (* (& y x) (^ y (~ x))))) (* (* x (& x (~ y))) (* (| y x) (* y 6809142882226667520))))))) (+ (+ (* (* (^ y x) (& x (~ y))) (+ (* -1 (* (^ y (~ x)) (* x (* y 9074598492889939968)))) (+ (* (^ y x) (* y -3024866164296646656)) (* (* y x) (* (& x (~ y)) 4686072790409805824))))) (+ (* (^ y (~ x)) (* (* (^ y x) (^ y (~ x))) (* (^ y x) 7710938954706452480))) (+ (* (+ (* (& x (~ y)) (& x (~ y))) (* (& y x) (& y x))) (* (| y x) (* y -1044444237166280704))) (+ (* (* (& y x) (& x (~ y))) (* (^ y x) (* (^ y x) 3024866164296646656))) (* (+ (& x (~ y)) (^ y (~ x))) (+ (* (| y x) (* (^ y x) 4539428588151111680)) (* (* y (* x x)) (* y 4859271590048694272)))))))) (+ (* (& y x) (+ (* (^ y x) (* -1 2688616885544550400)) (* (& y x) (* y -1242936803585949696)))) (+ (* (^ y x) (+ (* (| y x) (* (^ y x) -156381889551138816)) (* y 2688616885544550400))) (* y (+ (* (^ y (~ x)) (+ (* (| y x) (* y -1044444237166280704)) (* (^ y x) (* (^ y x) -3024866164296646656)))) (+ (* (+ (& x (~ y)) (^ y (~ x))) (* (^ y x) (* y 8701149918271635456))) (* (& y x) (* (& y x) (* (^ y x) (* x 4686072790409805824)))))))))))))))) (+ (+ (* (* y (| y x)) (+ (* (^ y x) 4539428588151111680) (* (+ y (^ y (~ x))) (* x 6809142882226667520)))) (+ (+ (+ (* (^ y x) (* x (+ (* (* (^ y (~ x)) (^ y (~ x))) (* y 4686072790409805824)) (* 9074598492889939968 (* (& y x) (* y (+ y (^ y (~ x))))))))) (+ (* 4539428588151111680 (* (+ y (^ y (~ x))) (* (| y x) (| y x)))) (* (* x -5395019196302098432) (+ (* (^ y (~ x)) (* y (* (& y x) (& y x)))) (* (& x (~ y)) (* y (* y y))))))) (+ (+ (* (* (& y x) (& x (~ y))) (+ (* -5395019196302098432 (* (& y x) (* y x))) (* (* y (& x (~ y))) (* x 5395019196302098432)))) (+ (+ (* (& y x) (* (| y x) (* (^ y x) (* -1 4539428588151111680)))) (* (* (& x (~ y)) (& x (~ y))) (+ 3690632102866321408 (* (^ y (~ x)) (* y (* x -5395019196302098432)))))) (* (& y x) (+ (* (| y x) (+ (* (^ y (~ x)) (* y 2088888474332561408)) (* (* -1 (& x (~ y))) 7553939277059457024))) (+ (* -1 (+ (* (* y (* x x)) (* y 4859271590048694272)) (* (& x (~ y)) 7381264205732642816))) (+ (* (^ y x) (* x (* y 5818800595741442048))) (* (& y x) 3690632102866321408))))))) (+ (* (* (| y x) (& x (~ y))) (+ (* (& y x) (* y 2088888474332561408)) (* (^ y (~ x)) (* (^ y (~ x)) -1044444237166280704)))) (* (* (^ y x) 9197308388596252672) (* (* (^ y x) (^ y x)) (+ y (+ (& x (~ y)) (^ y (~ x))))))))) (+ (* (| y x) (* y 5377233771089100800)) (+ (+ (* (* y x) (+ (* (* (| y x) (| y x)) -469145668653416448) (* (^ y x) (+ (* (| y x) -469145668653416448) (+ (* y (* x -2481772634958725120)) 7941870687558303744))))) (* (& x (~ y)) (+ (* (* (^ y x) (^ y (~ x))) (+ (* (^ y (~ x)) 8701149918271635456) (* (& y x) 1044444237166280704))) (+ (* (* (& y x) (& y x)) (+ (* (| y x) -1044444237166280704) (* (& x (~ y)) 868865012033126400))) (+ (* (* (| y x) (& x (~ y))) (+ (* (& y x) 1044444237166280704) (+ (* (^ y (~ x)) -1044444237166280704) (* (& x (~ y)) 5800766612181090304)))) (* -1 (+ (* (* (& y x) (& y x)) (* (& y x) 579243341355417600)) (+ (* 7656705681105354752 (* (^ y (~ x)) (* (& y x) (* y x)))) (* 9078561201515921408 (* (& x (~ y)) (* (& x (~ y)) (& x (~ y))))))))))))) (+ (* (& y x) (+ (* -1 (+ (* (| y x) 5377233771089100800) 2504084959427864238)) (+ (+ (* (* (& y x) (& y x)) 414312267861983232) (* x (* -1 (* y 4032925328316825600)))) (+ (* (& x (~ y)) (* (^ y (~ x)) 2485873607171899392)) (* (+ (& x (~ y)) (^ y (~ x))) (* (& y x) -1242936803585949696)))))) (+ (* (* (& y x) (^ y (~ x))) (+ (* -1 7381264205732642816) (* (^ y (~ x)) 1242936803585949696))) (+ (* (* y y) 3690632102866321408) (* (& y x) (+ (* (* (| y x) (^ y (~ x))) (+ (* (& y x) -1044444237166280704) (* (^ y (~ x)) 1044444237166280704))) (+ (* (| y x) (* (& x (~ y)) (* (^ y (~ x)) 2088888474332561408))) (+ (* (* (| y x) (& x (~ y))) (+ (* x (* y -297547087929671680)) (* (^ y x) (* -1 6347279416522964992)))) (* -1 (+ (* (+ (& x (~ y)) (^ y (~ x))) (* (* y y) (* x 7656705681105354752))) (* (* (& y x) (| y x)) (+ (* (* y x) 9074598492889939968) (* (& y x) 5800766612181090304)))))))))))))))) (+ (+ (+ (+ (+ (* (^ y (~ x)) (+ (* 6347279416522964992 (* (| y x) (* (^ y x) (+ y (& x (~ y)))))) (* -1 (+ (* (| y x) (* (^ y x) (* (& y x) 6347279416522964992))) (* (^ y (~ x)) (* y (* (* x x) (* y 5708817444047421440)))))))) (+ (* (* (& y x) (| y x)) (+ (* (| y x) (* -1 4539428588151111680)) (* (* y x) -6809142882226667520))) (* (^ y x) (* x (* (* y (* y y)) 4686072790409805824))))) (+ (+ (+ (* (^ y (~ x)) (* (& x (~ y)) (* (* y y) (* x 7656705681105354752)))) (+ (* (+ y (^ y (~ x))) (* (* (| y x) (& x (~ y))) (* (* y x) 297547087929671680))) (* (+ (* (& x (~ y)) (& x (~ y))) (* (& y x) (& y x))) (* -5395019196302098432 (* x (* y y)))))) (+ (* (& y x) (+ (* (& y x) (* (* y y) 868865012033126400)) (* 1737730024066252800 (* (* y (& x (~ y))) (+ (& y x) (* -1 (& x (~ y)))))))) (* (* x (* y (* y y))) (+ (* y 4350574959135817728) (* (^ y (~ x)) -5395019196302098432))))) (+ (+ (* (+ (& x (~ y)) (^ y (~ x))) (* y (* (^ y x) (* x -5818800595741442048)))) (* (* (^ y (~ x)) 2900383306090545152) (* (^ y (~ x)) (* (^ y x) (^ y (~ x)))))) 
            (+ (* (* (& y x) (& y x)) (+ (* (^ y x) (* (^ y x) 7710938954706452480)) (* y (* -1 (* (* x x) (* y 5708817444047421440)))))) (+ (* -1 (+ (* (| y x) (* (| y x) (* 6347279416522964992 (* (& y x) (& x (~ y)))))) (* (* (| y x) (* (| y x) 6049732328593293312)) (+ (* y y) (* (& y x) (& y x)))))) (+ (* (* (& x (~ y)) (& x (~ y))) (* (& x (~ y)) (* y 579243341355417600))) (+ (* (^ y (~ x)) (* (| y x) (* (| y x) (* y 6347279416522964992)))) (* (* (& y x) (^ y (~ x))) (+ (* (& y x) (* y 1737730024066252800)) (* -1 (* (* y (& x (~ y))) 3475460048132505600))))))))))) (+ (+ (* (* (| y x) -5446402398325047296) (+ (* (& y x) (& y x)) (+ (* (^ y (~ x)) (^ y (~ x))) (+ (* y y) (* (& x (~ y)) (& x (~ y))))))) (+ (* (* (* y (* y y)) (* x x)) (+ (* (& y x) (* x 1240886317479362560)) (* (+ (& x (~ y)) (^ y (~ x))) 7029109185614708736))) (+ (* (* y (^ y x)) (+ (* (^ y (~ x)) -5446402398325047296) (* y 6500170837692252160))) (+ (* x (* (^ y x) (* (* y y) -5818800595741442048))) (+ (* (* (& x (~ y)) (^ y (~ x))) (+ (* (* y y) 1737730024066252800) (* 579243341355417600 (* (^ y (~ x)) (^ y (~ x)))))) (+ (* (+ y (^ y (~ x))) (* (^ y x) (* (^ y x) -8088514889816997888))) (* -1 (+ (* (* (& x (~ y)) (& x (~ y))) (* (| y x) (* (| y x) 6049732328593293312))) (+ (* (+ (& x (~ y)) (^ y (~ x))) (+ (* (* x 1053768439367204864) (* y (& y x))) (* (^ y x) (* (* y y) (* x 9074598492889939968))))) (+ (* (+ (* (& x (~ y)) (& x (~ y))) (* (& y x) (& y x))) (* (* y x) 8696487817171173376)) (+ (* 5708817444047421440 (* (* x (* y (& x (~ y)))) (* x (* y (& x (~ y)))))) (+ (* (* y y) (* (* (& x (~ y)) (* x (& y x))) (* x 7029109185614708736))) (* (* (^ y x) 9197308388596252672) (* (& y x) (* (^ y x) (^ y x)))))))))))))))) (* (* (& x (~ y)) (& x (~ y))) (+ (* (^ y (~ x)) (* (& x (~ y)) 579243341355417600)) (* (| y x) (* (^ y x) (* -1 6049732328593293312))))))) (+ (+ (* y (+ (* -1 (* 5708817444047421440 (* (* y (* 
            y y)) (* x x)))) (* (^ y (~ x)) (* 297547087929671680 (* (| y x) (* y x)))))) (* (| y x) (+ (* (^ y (~ x)) (* (^ y (~ x)) (* x (* y -9074598492889939968)))) (+ (* (* y y) (+ (* x (* y -9074598492889939968)) (* (^ y x) (* -1 6049732328593293312)))) (* y (* (* y -297547087929671680) (* x (& y x)))))))) (+ (* (^ y x) (+ (* (* (& y x) (| y x)) (* (& y x) (* -1 6049732328593293312))) (* (^ y x) (+ (* (& x (~ y)) -8088514889816997888) (* (& y x) 8088514889816997888))))) (+ (* (* (& y x) (+ y (^ y (~ x)))) (* (^ y x) (* (^ y x) 3024866164296646656))) (* (& y x) (* -1 (+ (* (* (^ y x) (^ y (~ x))) (* (^ y (~ x)) 8701149918271635456)) (+ (* (+ (* y 579243341355417600) (* (& y x) 9078561201515921408)) (* (& y x) (& y x))) (* y (* 579243341355417600 (* y y))))))))))) (+ (+ (* (& x (~ y)) (+ (* (^ y (~ x)) (* y -2485873607171899392)) (* (| y x) (* (| y x) (* (* y x) -469145668653416448))))) (+ (+ (* (* (& x (~ y)) (& x (~ y))) (+ (* (^ y (~ x)) -1242936803585949696) (* -1 (* (& x (~ y)) 414312267861983232)))) (* (* (^ y x) (& x (~ y))) (+ (* (^ y (~ x)) -5446402398325047296) (* (& x (~ y)) 6500170837692252160)))) (+ (* -5446402398325047296 (* (& x (~ y)) (* y (^ y x)))) (+ (* (* y y) (* (& y x) 1242936803585949696)) (* (* y (& x (~ y))) (* (& x (~ y)) -1242936803585949696)))))) (+ (+ (* y (* (| y x) (* (| y x) (* x (* (^ y (~ x)) -469145668653416448))))) (+ (* (* (& y x) (+ y (^ y (~ x)))) (* (^ y x) 5446402398325047296)) (* (* (| y x) (| y x)) (+ (* -208509186068185088 (+ (| y x) (* y (| y x)))) (* (^ y x) -312763779102277632))))) (+ (+ (* (+ (& x (~ y)) (^ y (~ x))) (+ (+ 2504084959427864238 (* (& y x) (* y 2485873607171899392))) (+ (* (| y x) 5377233771089100800) (+ (* x (* y 4032925328316825600)) (* (^ y x) 2688616885544550400))))) (+ (* (& x (~ y)) (* y 7381264205732642816)) (+ (* (* (^ y (~ x)) (^ y (~ x))) (+ 3690632102866321408 (* -1 (* (^ y (~ x)) 414312267861983232)))) 
            (+ (+ (* (+ y (^ y (~ x))) (* (^ y (~ x)) (* y -1242936803585949696))) (* (* y (& y x)) (+ (* -1 7381264205732642816) (* (& y x) (* (^ y x) 8701149918271635456))))) (* (^ y x) (* (* y y) (* y 2900383306090545152))))))) (* y (+ (* (^ y (~ x)) 7381264205732642816) (+ (* -1 (* (* y (* x x)) (* (* y x) 1240886317479362560))) (+ 2504084959427864238 (* x (* y 4032925328316825600))))))))))))".to_owned()
    };

    println!("Attempting to simplify expression: {}", expr);

    let mut simplified = simplify(expr.as_str(), true);

    for i in 0..10 {
        simplified = simplify(&simplified, i % 2 == 0);
    }

    simplified = simplify(&simplified, false);
    simplified = simplify(&simplified, false);
    println!("{}", simplified);
}

#[cfg(test)]
mod test {
    use crate::simplify;

    macro_rules! validate_output {
        ($input:expr, $output:expr) => {
            assert_eq!(simplify($input, false), $output)
        };
    }

    #[test]
    fn basic_arith_const_prop() {
        validate_output!("(+ 1 2)", "3");
        validate_output!("(* 1 2)", "2");
        validate_output!("(** 1 2)", "1");
    }

    #[test]
    fn basic_arith_const_prop_with_negative() {
        validate_output!("(+ -1 -2)", "-3");
        validate_output!("(* -1 2)", "-2");
        validate_output!("(** -1 3)", "-1");
    }

    #[test]
    fn basic_bitwise_const_prop() {
        validate_output!("(& 1 2)", "0");
        validate_output!("(| 1 2)", "3");
        validate_output!("(^ 1 2)", "3");
        validate_output!("(~ 1)", "-2");
    }

    #[test]
    fn already_simplified() {
        validate_output!("(+ ?a 1)", "(+ ?a 1)");
        validate_output!("(~ ?a)", "(~ ?a)");
        validate_output!("?a", "?a");
        validate_output!("5", "5");
    }

    #[test]
    fn simplifies_double_negation() {
        validate_output!("(* (* ?a -1) -1)", "?a");
        validate_output!("(~ (~ ?a))", "?a");
    }

    #[test]
    fn adding_same_value_is_multiplication() {
        validate_output!("(+ ?a (+ ?a ?a))", "(* ?a 3)");
    }

    #[test]
    fn extracts_constant_from_pow() {
        validate_output!("(** (* ?a 2) 2)", "(* 4 (** ?a 2))");
        validate_output!("(** (* 2 ?a) 2)", "(* 4 (** ?a 2))");
        validate_output!("(* (** (* ?a 2) 2) 2)", "(* (** ?a 2) 8)");
        validate_output!("(* (* ?a 2) (* ?a 2))", "(* (* ?a ?a) 4)");
    }
}
